name: Build and Package Squidify App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - os: windows
            runner: windows-latest
            platform: windows
          - os: macos
            runner: macos-latest
            platform: mac
          - os: linux
            runner: ubuntu-latest
            platform: linux

    name: Build for ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Nativefier
        run: npm install -g nativefier

      - name: Build Squidify app with Nativefier
        shell: bash
        run: |
          mkdir -p output
          nativefier \
            --name "Squidify" \
            --platform=${{ matrix.platform }} \
            --resizable \
            --enable-dev-tools \
            --single-instance \
            --tray \
            --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36" \
            --chromium-args="--disable-http2 --disable-quic --disable-features=QUIC,HTTP3 --enable-features=HttpProtocolNegotiation" \
            "https://squidify.org" output/

      - name: macOS DMG setup
        if: matrix.os == 'macos'
        run: |
          brew install create-dmg
          cd output
          create-dmg --volname "Squidify" --window-pos 200 120 --window-size 600 400 --icon-size 100 --icon "Squidify.app" 100 190 --app-drop-link 400 190 squidify-macos.dmg Squidify.app

      - name: Linux AppImage setup
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y appimagetool
          cd output
          # Assuming output/linux-x64 folder, pack into AppImage (adjust if needed)
          appimagetool Squidify-linux-x64 Squidify.AppImage

      - name: Windows rename output folder
        if: matrix.os == 'windows'
        shell: bash
        run: |
          folder=$(find output -maxdepth 1 -type d -name '*win32-x64' | head -n 1)
          echo "Renaming $folder to output/Squidify-win32-x64"
          if [[ "$folder" != "output/Squidify-win32-x64" ]]; then
            mv "$folder" output/Squidify-win32-x64
          fi

      - name: Windows zip raw app folder
        if: matrix.os == 'windows'
        shell: bash
        run: |
          cd output
          zip -r squidify-windows.zip Squidify-win32-x64/

      - name: Install NSIS
        if: matrix.os == 'windows'
        run: choco install nsis -y

      - name: Build NSIS installer
        if: matrix.os == 'windows'
        run: makensis installer.nsi

      - name: Upload raw app artifact
        uses: actions/upload-artifact@v4
        with:
          name: squidify-${{ matrix.os }}-raw
          path: |
            output/squidify-windows.zip
            output/Squidify.app
            output/Squidify-linux-x64
        # Note: these paths exist only on relevant OSes, so only one will upload each run

      - name: Upload installer artifact (Windows NSIS, macOS DMG, Linux AppImage)
        uses: actions/upload-artifact@v4
        with:
          name: squidify-${{ matrix.os }}-installer
          path: |
            ${{ matrix.os == 'windows' && 'SquidifyInstaller.exe' || '' }}
            ${{ matrix.os == 'macos' && 'output/squidify-macos.dmg' || '' }}
            ${{ matrix.os == 'linux' && 'output/Squidify.AppImage' || '' }}
