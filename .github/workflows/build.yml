name: Build Squidify App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        os: [linux, windows, macos]
        include:
          - os: linux
            runner: ubuntu-latest
            platform: linux
          - os: windows
            runner: windows-latest
            platform: windows
          - os: macos
            runner: macos-latest
            platform: mac

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Nativefier
        run: npm install -g nativefier

      # Build app with Nativefier for Linux/macOS
      - name: Build app (Linux/macOS)
        if: matrix.os != 'windows'
        run: |
          mkdir -p output
          nativefier \
            --name "Squidify" \
            --platform=${{ matrix.platform }} \
            --resizable \
            --enable-dev-tools \
            --single-instance \
            --tray \
            --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36" \
            --chromium-args="--disable-http2 --disable-quic --disable-features=QUIC,HTTP3 --enable-features=HttpProtocolNegotiation" \
            "https://squidify.org" output/

      # Build app with Nativefier for Windows
      - name: Build app (Windows)
        if: matrix.os == 'windows'
        shell: bash
        run: |
          mkdir output
          nativefier \
            --name "Squidify" \
            --platform=windows \
            --resizable \
            --enable-dev-tools \
            --single-instance \
            --tray \
            --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36" \
            --chromium-args="--disable-http2 --disable-quic --disable-features=QUIC,HTTP3 --enable-features=HttpProtocolNegotiation" \
            "https://squidify.org" output/

      # Rename Windows output folder to fixed name for NSIS packaging
      - name: Rename Windows output folder
        if: matrix.os == 'windows'
        shell: bash
        run: |
          folder=$(find output -maxdepth 1 -type d -name '*win32-x64' | head -n 1)
          echo "Renaming $folder to output/Squidify-win32-x64"
          mv "$folder" output/Squidify-win32-x64

      # Create NSIS installer for Windows
      - name: Create NSIS installer
        if: matrix.os == 'windows'
        shell: cmd
        run: |
          "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi

      # Package macOS app as DMG
      - name: Create macOS DMG
        if: matrix.os == 'macos'
        run: |
          brew install create-dmg || true
          cd output
          create-dmg Squidify-mac-x64 Squidify.dmg

      # Package Linux app as AppImage
      - name: Create Linux AppImage
        if: matrix.os == 'linux'
        run: |
          wget -q https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          cd output
          ./../appimagetool-x86_64.AppImage Squidify-linux-x64 Squidify.AppImage

      # Upload Windows installer artifact
      - name: Upload Windows NSIS installer
        if: matrix.os == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: squidify-installer-windows
          path: output/SquidifyInstaller.exe
          if-no-files-found: warn

      # Upload Windows app folder artifact
      - name: Upload Windows app folder
        if: matrix.os == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: squidify-windows-app
          path: output/Squidify-win32-x64/
          if-no-files-found: warn

      # Upload macOS DMG artifact
      - name: Upload macOS DMG
        if: matrix.os == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: squidify-macos
          path: output/Squidify.dmg
          if-no-files-found: warn

      # Upload Linux AppImage artifact
      - name: Upload Linux AppImage
        if: matrix.os == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: squidify-linux
          path: output/Squidify.AppImage
          if-no-files-found: warn
